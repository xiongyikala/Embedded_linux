驱动程序一般指的是设备驱动程序（Device Driver），
是一种可以使计算机和设备通信的特殊程序。相当于硬件的接口，
操作系统只有通过这个接口，才能控制硬件设备的工作，
假如某设备的驱动程序未能正确安装，便不能正常工作。
因此，驱动程序被比作“ 硬件的灵魂”、“硬件的主宰”、和“硬件和系统之间的桥梁”等。

yy:cpu可以与外设中的芯片通信，驱动程序就是这一段相应的代码，并给操作系统提供接口。
外设---iO接口---裸机程序
										|封
									  |装
外设---iO接口---驱动程序（硬件接口）---操作系统

Linux作为UNIX的一个变种，继承了UNIX的设备管理方法，
将所有的设备是具体的文件，通过文件系统层对设备进行访问。
这种设备管理方法可以很好地做到“设备无关性”，可以根据硬件外设的更新进行方便的扩展。

Linux中的设备大致可以分为三类：字符设备，块设备，网络设备。
字符设备没有缓冲区，以字节为单位顺序处理数据，不支持随机读写。
常见的字符设备如普通打印机、系统的串口、终端显示器、嵌入式设备中的简单按键、手写板等。

块设备是指在输入输出时数据处理以块为单位的设备，一般都采用缓冲技术，支持数据的随机读写。
典型的块设备有硬盘、光驱等。

字符设备和块设备面向的上一层是文件系统层。
对用户来说，块设备和字符设备的访问接口都是一组基于文件的系统调用，如read, write等。

网络设备与块设备和字符设备不同，网络设备面向的上一层是网络协议层。
设备文件是一个唯一的名字（如eth0），在文件系统中不存在对应的节点项。
内核和网络驱动程序之间的通信使用的是一套和数据包传输相关的函数，而不是read, write等。
每一个设备都有一对主设备号、次设备号的参数作为唯一的标识。
主设备号标识设备对应的驱动程序；次设备号用来区分具体驱动程序的实例。
主设备号的获取可以通过动态分配或指定的方式。在嵌入式系统中外设较少，一般采用指定的方式。

定义--填充--注册



模块---加到内核中相应的链表中，内核初始化时会遍历调用

1.编写
module_init()
module_exit()
MODULE_LICENSE()

2.编译Makefile
mkdir lib/module/3.14.0 -p

3.加载卸载
	insmod xxx.ko
	rmmod xxxx
字符设备
块设备
网络设备

1.框架
2.硬件的配置--寄存器，协议
3.编程思想


普通文件和设备文件有什么区别
vfs中设备文件对应一个设备，没有文件系统。
vfs中普通文件对应一个设备文件系统里的文件--磁盘文件

设备文件--号码---设备

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <asm/uaccess.h>
#include <linux/mm.h>
#include <linux/io.h>
实现字符设备驱动的流程：
1.实现内核模块的框架
	a.头文件
	b.init exit
	c.license
附加：
				MODULE_LICENSE("GPL");
				MODULE_AUTHOR("albertLuo@farsight.cn");
				MODULE_DESCRIPTION("my module");
				module_param() 模块传参讲解
					insmod mymodule.ko hello=10
					module_param(hello,int,0)
2.字符设备的注册
  a.定义一个cdev结构体变量
	b.获取申请设备号
	---动态alloc_chrdev_region(&devnum,0,1,"globalmem")
		 静态register_chrdev_region()
	c.初始化cdev
	---cdev_init(&globalmem_cdev,&fops)
	---将操作函数结构体的地址给设备
	d.注册到系统中去---cdev_add(&globalmem_cdev,devnum,1)
	----关联设备和设备号，并将设备插入内核链表中
	e.模块卸载，设备注销
	----cdev_del()
	   unregister_chrdev_region()
	
3.主次设备号 字符设备
		a.设备文件和驱动程序如何对应上的(建立联系)？
	
			答：通过主设备号	
	
		b.dev_t dev 设备号 一个32位的整数 其中前12位 是 主设备号，后20位位次设备号
			
			可以通过MAJOR(dev) 获得主设备号，MINOR(dev) 获得次设备号
			
			主设备号用来标识与字符设备文件相连的驱动程序(一类设备)
			次设备号区分同一类设备的某一个设备

		c.驱动中如何获取设备号？
			设备文件设备号获取
				mknod  /dev/mydevice  c  254  0

				演示echo aaa >  /dev/mydevice 出错，因为找不到对应的驱动，找不到硬件设备 
				
				下面要做的事情就是实现驱动，在驱动里面获取设备号。
			
				驱动中获取设备号
					动态分配：alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name);
								系统生成设备号，不当心占用，但是不知道设备号是多少，所以驱动没有安装前不能创建设备文件
					静态分配：register_chrdev_region
						当心自己提供的设备号已被占用，知道设备号是多少

					注销设备号: unregister_chrdev_region
查看注册设备cat /proc/devices


调用原理：
file结构体
file_operation结构体
iNode结构体


应用程序--mycat.c---读，myecho.c---写，ioctl_test.c---控制
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
打开
读，打印
关闭




1.入参检查

2.读的时候--copy_to_user(ubuf,mem,count)
内核-->用户内存
count = size > len ? len :size
len--设备的有效字节数---全局变量
size--需要读的
需要读的>有效字节数 
-----就全部给他
需要读的<有效字节数 
---就部分给他并更新剩下的有效字节数
len -= count


写的时候---copy_from_user()
用户内存-->内核
count = size > (GLOBALMEM - len) ? (GLOBALMEM - len) :size
len--有效字节数
(GLOBALMEM - len)--剩下的有效字节数
size--需要写的
需要写的>剩下的有效字节数
--就部分给他并更新剩下的有效字节数
len += count
GLOBALMEN - len
 <-->GLOBALMEN - len - count
需要写的<剩下的有效字节数 
-----就全部给他


测试：
1.加载insmod
2.创建设备文件mknod--mknod  /dev/globalmem  c  254  0
3../myecho /dev/globalmem aaaa
4../mycat /dev/globalmem
5.卸载rmmod

ioctl：
宏-->生成32位数命令--->传给ioctl函数
#define GLOBALMEN_LEN _IO('c'，0)
1.len
2.clean
3.求剩余空间

互斥：占用时，poll
中断屏蔽：也会干扰到那些不与之抢占资源的进程啊
信号量：占用时，等待睡眠，释放后，唤醒
互斥锁：占用时，sleep


自旋锁：
上锁
临界资源
解锁

两种锁的加锁原理

互斥锁：线程会从sleep（加锁）――>running（解锁），过程中有上下文的切换,
cpu的抢占，信号的发送等开销。

自旋锁：线程一直是running(加锁――>解锁)，死循环检测锁的标志位，机制不复杂。


led的驱动用字符设备的框架实现
				1>申请
				/*
					para:start 起始地址   len，大小  name，名称   
				*/
				struct resource *request_mem_region(unsigned long start, unsigned long len, char *name);
				 这个系统已经申请好。驱动中无需做了。
				
				
			2>映射到虚拟地址
				问题：大家觉得现在操作操作硬件还能像之前的裸机开发一样直接按照寄存器地址操作吗？
					linux系统的使用的内存是虚拟内存，程序操作的内存地址其实都是虚拟地址。
					所以同样外设寄存器地址是物理地址，必须映射到操作系统的某段虚拟地址。
					linux应用空间虚拟地址范围0~3G,内核空间是3~4G.
					
					
					void *ioremap(unsigned long offset, unsigned long size);
					offset 需要被映射的iomem起始地址，size 需要映射的范围大小
					如果映射失败，返回NULL,否者返回映射后具体地址
				程序执行时：mmu会帮我们把虚拟地址再转换为物理地址	
			3>访问
			
				读I/O内存
					unsigned int ioread8(void *addr);
					unsigned int ioread16(void *addr);
					unsigned int ioread32(void *addr);

				写I/O内存
					void iowrite8(u8 value, void *addr);
					void iowrite16(u16 value, void *addr);
					void iowrite32(u32 value, void *addr);
					
			4> 取消映射
				void iounmap(void * addr);
					
			4>释放
				I/O内存释放
				void release_mem_region(unsigned long start, unsigned long len);
				
				
进程是由结构体来描述，里面有一个成员描述当前进程的状态（睡眠，运行，僵尸等）
一些睡眠的进程会被放进等待队列中，阻塞的进程入队，唤醒的进程出队

waitqueue实现读阻塞的流程：
1.定义等待队列 wait_queue_head_t read_queue
2.初始化等待队列 init_waitqueue_head(&read_queue)
3.加入等待队列wait_event_interruptible(read_queue,len > 0)
wait_event_interruptible(write_queue,(GLOBALMEMSIZE - len) > 0)
4.唤醒wake_up(&read_queue)
由内核进程里的函数决定用户进程的状态（阻塞与非阻塞）

实验方法：./mycat /dev/gg &   ---后台调用
./myecho /dev/gg aaa


select实现阻塞与非阻塞的流程：
select-->do_select-->poll_wait
do_select:

得到fd-->f.file-->f_op-->poll-->返回掩码，
然后判断可读可写或异常-->retval>0跳出循环

内核：
机制--函数
对象--结构体

驱动编写流程
1.模块框架
2.字符设备框架
	+fops的实现
3.虚拟地址与物理地址之间的映射，寄存器配置

自动创建设备：
1.创建类
--class_create(THIS_MODULE,"led_class")
2.创建设备
---device_create()
3.销毁设备
4.销毁类
设备名是在申请时指定了---alloc_chrdev_region(&devnum,0,1,"globalmem")
注意：设备名不等于设备文件名，他们通过设备号相关联
--在sys/创建类目录-->在类目录下创建设备目录-->插入模块是会产生热插拔事件--->产生相应的设备文件

【1】驱动中file_operations 中各函数的实现

	1.read：
		
		ssize_t (*read) (struct file *filep, char __user *ubuf, size_t size, loff_t *loff);
		
		参数 ：file指针    用户空间数据buf地址   欲读取的字节数  当前文件指针的位置偏移
		返回值：读到的字节数
		
		
		内核空间拷贝数据到用户空间使用函数copy_to_user  定义于 <asm/uaccess.h>
		
		 @param[out]			to													应用程序空间缓存
	  @param[in]				from												内核空间的缓存
	  @param[in]				n														要拷贝的字节数
	  @return					@li > 0											    未成功拷贝的字节数
										@li 0												成功
	  unsigned long copy_to_user(char __user *to, const char *from, unsigned long n);
	
	
	
	2.write：
		ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
		将数据冲用户空间考到内核
		unsigned long copy_from_user(void *to, const void __user *from, unsigned long n)
		
		注意：两个copy函数返回值是不能复制的字节数，所以如果copy成功返回0，read write函数也返回0，否则返回 -EFAULT。
	
	
	
	   测试读写函数应用代码：mycat.c myread.c
	
	
	3.实现一个 GLOBALMEM_CLEAR 清除 接口
	
	unlocked_ioctl:
	
		参数：cmd 系统调用 ioctl传下来的命令  ，arg 传下来的参数  
		
		long (*unlocked_ioctl) (struct file *filep, unsigned int cmd, unsigned long arg);
		
		以0x01为命令展示看学生，展示cmd不能随便自己定义，引出cmd生成的几个宏。
		
	ioctl命令生成宏
		ioctl的命令格式：  
		 方向    |         数据尺寸            | 设备类型 |  序列号
		 2bit    |          14bit              | 8bit     |  8bit 
		
		命令码由设备类型、序列号、方向、数据尺寸大小
		
		
		构造无参数的命令
		#define _IO(type,nr)             _IOC(_IOC_NONE,(type),(nr),0) 

		//构造从驱动程序中读取数据的命令编号
		#define _IOR(type,nr,size)     _IOC(_IOC_READ,(type),(nr),sizeof(size)) 

		//用于向驱动程序写入数据命令

		#define _IOW(type,nr,size)    _IOC(_IOC_WRITE,(type),(nr),sizeof(size))

		//用于双向传输
		#define _IOWR(type,nr,size) _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))

		
		命令测应用代码见ioctl_test.c
		
	
		ioctl传参数演示
				
	
【2】竟态   (例子不太适合，多举例子,严重性强调,串行互斥)
	提出一个问题：如果一个led被一个进程open了，在没有close之前，如果另外一个进程再去open的时候，提示设备已被打开了。
	怎么实现？（让学生自己思考，自己实现）
	提示用一个变量去记忆一下状态，如果已打开过，open返回一个EBUSY
	代码如下：
		int globalmem_open(struct inode * inodep, struct file *filep)
		{
			if(1 == avaliable){        --------------  (1)
						avaliable = 0; --------------  (2)
						 printk("globalmem device opened !\n");
			}else{
						printk("globalmem device has been opened !\n");
						return -EBUSY;
			}
			return 0;
		}
		
	代码见目录complete0 ,测试应用程序 test.c（open设备不关闭）和test1.c （去open)。
		
	但是有一个问题，假如当进程A执行完（1）语句之后还没有执行（2）句的时候，CPU调度，开始执行B进程，这样对于（2）语句进程A还没有执行，
	进程B在执行语句（1）的时候avaliable任然为1，那么进程B就就会走if分支，不走else分支，认为设备没有被打开过，但其实是被进程A打开过的。
	
	
	那么这种情况就叫做竟态。
	多个执行单元同时、并行被执行叫做并发。
	而并发的执行单元对共享资源的访问而导致这种竞争的状态就叫竟态。
	
	防止竟态发生的办法就是保证(1)和(2)句能在进程中执行完，不被分割。
	
	竟态发生的情况：
		1.多CPU
		2.单CPU进程抢占（抢占：一个进程在执行的时候可能被另一个高优先级的进程打断，抢占进程和被抢占进程访问共同资源）
		3.中断   中断可以打断正在执行的进程，如果中断处理程序访问进程正在访问的资源，则竟态发生。
	
	
	解决竟态问题的几种机制：
	1.中断屏蔽(家里干活电话中断，剪断电话线)
		原理：屏蔽进程被中断抢占的并发情况
		
		适用：单cpu,中断屏蔽时间短
		
		使用：
			   #include <linux/irqflags.h>
    
			   /*
				* @brief          关闭中断
				*/
			   local_irq_disable()
			   
			   ......            // 访问独占资源
			   
			   /*
				* @brief          使能中断
				*/
			   local_irq_enable()
			   
			       /*
				* @brief         保存中断状态并关闭中断
				* @param[out]    flags             保存中断状态
				*/
			   local_irq_save(unsigned long flags)
			   
			   .......           // 访问独占资源
			   
			   /*
				* @brief         恢复中断状态
				* @param[in]     flags             中断状态
				*/
			   local_irq_restore(unsigned long flags)
			
		样例代码见目录complete1。
		
		
		2.信号量（借书比喻）
			原理：一个任务想要获得已经被占用的信号量时，信号量会将这个进程放入一个等待队列，让其睡眠，当持有信号量的进程将信号释放之后，处于等待
				队列的睡眠的任务将被唤醒，并让其获得信号量。
			使用：	
				#include <linux/semaphore.h>
				
				定义信号量
				struct semaphore sem;
				
				初始化信号量
				void sema_init(struct semaphore *sem, int val);//给信号量赋初值
				
				初始化一个互斥锁，val为1
				void init_MUTEX(struct semaphore *);
				
				//初始化互斥锁，val为0，就是一开始就锁定状态
				void init_MUTEX_LOCKED(struct semaphore *sem);
				
				//获取信号量
				down(struct semaphore)
				导致进程睡眠，sem值减1，如果信号量sem的值非负，直接返回，否则调用者被挂起，知道别的进程释放信号量才能继续。
				
				down_interruptible(struct semaphore*sem);
				与down的不同在于可以被中断，如果被信号打断，返回-EINTR.
				
				//尝试去获取信号量，返回0如果成功，失败返回1
				down_trylock(&sem);
				
				
				//释放信号量
				up(struct semaphore *sem);
	
			适用：
				适用于等待时间较长的情况，可以被多个进程持有。
				不适用于单CPU中断导致的情况，因为引起睡眠
	
			多个持有者的叫计数信号量  大于1
			一个持有者 互斥信号量    =1
			
			样例代码见complete2目录。
		
		3.自旋锁(等厕所，如果有人一直在门口转悠，时不时看是否出来了，忙等)
			原理：自旋锁最多只能被一个执行单元持有。
			自旋锁不会引起调用者的睡眠，如果一个执行单元试图获得一个已经持有自旋锁的单元，那么这个执行单元会一直忙等待下去
			在那里看自旋锁持有者是否释放了锁。这就是“自旋”
			
			使用：
			
			#include <linux/spinlock.h>
			
			//定义
			spinlock_t lock;
			//初始化自旋锁
			spin_lock_init(lock);
			//获得自旋锁
			spin_lock(lock)
			如果能够获得立即返回，否者自旋在那里，直到自旋锁被释放
			
			spin_trylock(lock)
			如果能够获得立即返回真，否者返回假，不自旋。
			
			//释放自旋锁
			spin_unlock(lock);
			
	
			适用：	
				适用于占用时间较短的，由于是忙等待，所以一直占有CPU，导致cpu无法响应其它进程
				
			样例代码见complete3目录。
				
		4.互斥体
			原理：
			互斥体就是信号量置1的时候的情况。
			也就是说资源只能为一个执行单元所拥有。
			
			使用：
			//定义
			struct mutex my_mutex;
			//初始化
			mutex_init(&mymutex);
			//获取锁
			 int mutext_lock(struct mutex * lock);
			int mutext_lock_interruptible(struct mutex * lock);//可被信号中断
			int mutext_trylock(lock);//尝试获取mutex，获取不到不会引起进程休眠
			//释放互斥体
			void mutex_unlock(lock);

			适用：与信号量用于互斥的时候完全一样
			
		5.原子操作
			
			原子操作指操作在执行的过程中不被其它代码打断。
			
			如果将（1）和（2）两条语句一起执行，而且不能被其它进程打断不是最好吗？
			
			使用详见PPT
			
			样例代码见complete4目录。
		
		作业：对globalmem的读写操作进行并发控制。用信号量等。

【3】阻塞与非阻塞

	阻塞：指进程执行设备操作的时候，如不能获取到资源，则会被挂起，进入休眠状态。
	被调度器从运行队列移走，知道等待的条件满足后才继续操作。
	非阻塞：进程在不能进行设备操作的时候，并不会挂起，而是不断的去查询，直至可以进行操作。
	
	问题：是阻塞好还是非阻塞好？
		阻塞让让得不到资源的进程睡眠，让CPU有空闲能调度其它进程。
		而非阻塞一直在那里查询，占用CPU资源高
	
	最常见的比如进行读操作一个设备的时候，如果没有东西可读，则挂起读进程进入休眠，直到有人将数据写入设备之后才唤醒读进程继续读操作。
	
	思考一个问题：
		有数据写入之后需要唤醒被睡眠的进程去哪儿找呢？
		最直接的想法是什么？（用一个链表之类的数据结构容器记录好）
		
	这里面驱动层其实是用的等待队列去记录的(引出等待队列)
	
	把被挂起的进程记录到等待队列，阻塞的队列入队，被唤醒的队列出队。
	
	等待队列：
		就是一个队列。
		
		操作：
			#include <linux/wait.h>
		
			1.定义等待队列
			wait_queue_head_t my_queue;
			wait_queue_t  等待队列成员
			
			讲解等待队列原理
			 见《等待队列原理图.bmp》
			
			2.初始化
			init_waitqueue_head(&my_queue);
			
			2.定义并初始化
			DECLARE_WAIT_QUEUE_HEAD(my_queue);
			
			
			3.有条件睡眠
			int wait_event_interruptible(wait_queue_head_t wq, condition);
			当condition条件为真时立即返回，否则进程进入TASK_INTERRUPT状态
			也就是说只有condition不满足时，进程才会被阻塞，接到其他信号可以被中断
			
			进程状态《linux进程状态.bmp》
			
			还有wait_event  进入TASK_UNINTERRUPT状态，不能被信号打断
			
			4.唤醒
			void wake_up(wait_queue_head_t *queue);
			唤醒等待队列中所有状态进程，包括 TASK_UNINTERRUPT 和 TASK_INTERRUPT
			 wake_up_interruptible
			唤醒等待队列中TASK_INTERRUPT状态进程
			
			
		演示实现读阻塞的globalmem实现。
			读 有数据 不阻塞，无数据 阻塞，写始终不阻塞
		
			代码见目录block_waitqueue
		
	 poll 轮询
		
		回忆应用层select系统调用使用方法：
		int select(int numfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
		用于监控多路文件，当没有一个文件满足要求时，会阻塞。
		参数：numfds，监测的文件描述符范围，最大的文件描述符加1
			readfds，被读监控的文件描述符集
			wrtefds，被写监控的文件描述符集
			exceptfds,被异常监控的文件描述符集
			timeout，阻塞超时时间
		使用样例代码：
		
		监控标准输入出和我们自己设备可读性，如可读则读出并打印。
			 char buf[100];
        while(1)
        {
                fd_set fds;
                FD_ZERO(&fds);//文件描述符集清除
                FD_SET(0, &fds);//添加标准输入输出文件描述符到文件描述符集
                FD_SET(fd, &fds);//添加设备文件描述符到描述符集

                if(-1 == select(fd+1, &fds, NULL,NULL,NULL))//0 timeout
                {
                        perror("select");
                        return -1;
                }


                if(FD_ISSET(0, &fds))
                {
                        bzero(buf, sizeof buf);
                        read(0, buf, 100);
                        printf("keyboard: %s\n", buf);
                }

                if(FD_ISSET(fd, &fds))
                {
                        bzero(buf, sizeof buf);
                        read(fd, buf, 100);
                        printf("mydevice: %s\n", buf);
                }
				
		}
		
		
		驱动代码中对应实现file_operations 中的poll响应函数 
		
		一般格式如下：
		 static unsigned int xxx_poll(struct file *filp, poll_table *wait)
		 {
			  unsigned int mask = 0;
			  struct xxx_dev *dev = filp->private_data; /*获得设备结构体指针*/
			   ...  
			  poll_wait(filp, &dev->r_wait, wait);//加读等待队列头
			  poll_wait(filp, &dev->w_wait, wait);//加写等待队列头 
			  if (...)//可读
			  {
					mask |= POLLIN | POLLRDNORM; /*标示数据可获得*/
			  }   
			  if (...)//可写
			  {
					mask |= POLLOUT | POLLWRNORM; /*标示数据可写入*/
				}
				...
				return mask;
		}
		
		#include <linux/poll.h>
		
		unsigned  int poll_wait(struct file *filep, poll_table * wait)
		wait是轮询的等待队列表
		此函数是向wait这个等待队列表中添加 可能设备文件状态变化的等待队列（比如之前读函数的不可读阻塞的等待队列引起设备文件的可读性）
		
		poll响应函数的实现步骤：
		1.调用poll_wait函数将可能引起设备文件状态变化的等待队列头添加到轮询表中，引起系统关注，这里并没有阻塞，阻塞其实是select系统调用的对应的
		内核函数do_select()是阻塞的。
		2.poll响应函数需返回设备文件状态掩码。如：POLLIN，POLLOUT，POLLRDNORM，POLLERR
		
		样例代码参看poll目录，代码只是打开讲一讲，不做具体演示实验。
		
		
	
	作业：led驱动采用字符设备驱动框架
	
	
1.中断注册函数：将irqaction.hander填进irqaction中
2.中断处理函数--快进快出
linux中断处理子系统：
		1.根据中断号找到对应的中断处理程序。
			irq_num  --> irq_desc  --> irqaction  -->  irqaction.handler
		
		2.中断处理函数实现；
			1、中断处理函数注册
				
				#include <linux/irq.h>
			
				int request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev)
				irq，中断号 ; handler,中断处理函数; 
				flags,中断标志  IRQF_DISABLED，表示中断处理程序过程中禁止其它所有中断
				                IRQF_SHARED ，表示多个设备共享中断
								
				dev ，中断共享时用到，共享中断时一般传这个设备结构体，区分是否是本设备中断
					不共享中断时，一般传NULL.
					
				name  设置中断名称，可以在 cat /proc/interrupts可以看到
		
		    2、中断处理函数实现
				
				typedef irqreturn_t (*irq_handler_t)(int irqnum, void *dev);
				
				irqnum,中断号   dev，共享中断时传进来的设备结构体
				
				IRQ_NONE,  中断不是来自于本设备中断
				IRQ_HANDLED,中断被处理
				IRQ_WAKE_THREAD, 唤醒中断线程
				
				
				中断处理函数模板：
				irqreturn_t  xxx_interrupt(int irq, void *dev_id)
				 {
						...
						int status = read_int_status();/*获知中断源*/
						if(!is_myint(dev_id,status))/*判断是否是本设备中断*/
						{
							return IRQ_NONE;  /*立即返回*/
						 }
						...
						return IRQ_HANDLED;			
				} 
				
				中断处理函数注意事项：
					原则：不要做耗时很大的事情(快进快出)。
					不能有睡眠，与用户空间数据交换，进程调度
					

			3、释放中断			
				void free_irq(unsigned int irq, void *dev_id)
				

总线：自学需要根据已有的材料脑补
struct device--总线从设备
struct device_driver---设备驱动
struct bus_type
---总线类型--连接驱动与设备的桥梁（match）
device以后用设备树来实现




问题:系统调用怎么调用到驱动的
platform--框架--实现
#include <linux/module.h>
#include <linux/init.h>
#include <linux/platform_device.h>
内核实现了match函数

---匹配有四种方式：OF 方式的匹配(设备树)  ----> ACPI 方式  ---> id table ----> driver name 和device name。
static int platform_match(struct device *dev, struct device_driver *drv)
{
	struct platform_device *pdev = to_platform_device(dev);
	struct platform_driver *pdrv = to_platform_driver(drv);

	/* Attempt an OF style match first */
	if (of_driver_match_device(dev, drv))
		return 1;

	/* Then try ACPI style match */
	if (acpi_driver_match_device(dev, drv))
		return 1;

	/* Then try to match against the id table */
	if (pdrv->id_table)
		return platform_match_id(pdrv->id_table, pdev) != NULL;

	/* fall-back to driver name match */
	return (strcmp(pdev->name, drv->name) == 0);
}




没有设备树：
platform_device的注册过程:
1.定义：struct platform_device *plat_dev;
2.初始化：plat_dev = platform_device_alloc("name",-1);

name是设备名，id，设备id，一般为-1，如果是-1，表示同样名字的设备只有一个
					举个简单的例子，name/id是“serial/1”则它的bus_id就是serial.1 
					如果name/id是“serial/0”则它的bus_id就是serial.0 ,
					如果它的name/id是“serial/-1”则它的bus_id就是serial。
3.添加device附属资源
struct resource plat_res[] = 
{
	{
		.start = 0x12345678,
		.end = 0x12345678 + 4,
		.flags = IORESOURCE_MEM,
	},
	{
		.start = 0x12345690,
		.end = 0x12345690 + 4,
		.flags = IORESOURCE_MEM,
	},
	{
		.start = 0x12,
		.end = 0x12,  //表示只用一个中断源
		.flags = IORESOURCE_IRQ,
	},
};
platform_device_add_resources(plat_dev,plat_res,2);
4.将platform_device添加到内核--注册
platform_device_add(plat_dev);
5.删除
platform_device_del(plat_dev);



platform_driver的注册过程:
1.定义并初始化platform_driver
struct platform_driver plat_drv = 
{
	.probe = myprobe,
	.remove = myremove,
	.driver.name = "name",
	.driver.owner = THIS_MODULE,
	<==>
	.driver = 
	{
		.name = "xxx",
	  .owner = THIS_MODULE,
	},
}
2.将platform_driver添加到内核--注册
platform_driver_register(&plat_drv);
3.实现probe和remove
int myprobe(struct platform_device *plat_dev)
{
	printk("matched\n");
	return 0;
}

int myremove(struct platform_device *plat_dev)
{
	printk("removed\n");
	return 0;
}
4.注销
platform_driver_unregister(&plat_drv);

匹配上回自动执行probe
在probe里获取资源
struct resource *res_mem;
res_mem = platform_get_resource(plat_dev,IORESOURCE_MEM,1);
printk("%x%x",res_mem->start,res_mem->end);
res_mem = platform_get_resource(plat_dev,IORESOURCE_IRQ,0);
printk("%x%x",res_mem->start,res_mem->end);
找错误，看调试信息，缩小范围，找与错误相关的代码有没有错误
int irqnum
irqnum = platform_get_irq(plat_dev,0);

device注册，注销--add，del
driver注册，注销--register，unregister

之前是设备资源与驱动程序合在一起，现在用总线模型将他们分开，
使得驱动更加抽象，可移植性好




设备树:
根节点
/{
	属性1;
	属性2;
	node1
	{
		属性1.1;
		属性1.2;
		node1.1{};
		node1.2{};
	};
	node2{};
}

格式：
基本名@扩展名
{属性}

 1. 根和内存
/ {
	model = "主板名";                
	compatible = "SOC名";            // 必选，用于匹配BSP中的支持的SOC列表，以判断内核是否支持该主板
//与driver中的of_match_table中的compatible[128]比较
	// platform总线
	#address-cells = <A>;           // 必选, 地址位数，单位(cell)为32bit, A = 地址位数 / 32
	#size-cells = <S>;              // 必选, 大小位数，单位(cell)为32bit, S = 大小位数 / 32
	
	// 内存
	memory {
		device_type = "memory";       // device_type值一定为"memory"
		reg = <address ... size ...>  // 必选, 描述地址范围
	};
};

设备：
标号：设备@地址
{
	name        //设备树中的名字要和驱动结构体中的名字一样，才能匹配（第四种方式），与设备文件名无关
	device type
	compatible
	//io内存（寄存器）地址
	//---一个cell就是32位
	#address-cells = <A>;size用A个cell表示
	#size-cells = <S>;//size用S个cell表示
	reg = <>;//定义块内存资源
}





//中断树
{
	interrupt_parent
	interrupts
	#interrupts-cells
	
}
linux源码中
Documentation/devicetree/bindings/interrupt-controller/interrupts.txt

结点--设备信息
设备树文件--设备树解释文文档

adc设备树
兼容信息，cell信息，中断号（42），
arch/arm/boot/dts/exynos4.dtsi文件中：
父中断信息combiner,IntG10_3
寄存器

1.修改设备树文件
--make dtbs
---结点--->memory类型的resoureces
拷贝至tftpboot

2.写驱动
模块：
static int of_plat_init(void)
{
	//2.注册
	platform_driver_register(&of_plat);

}
static void of_plat_init(void)
{
	//3.注销
}
module_init(of_plat_init);
module_exit(of_plat_exit);

驱动：

//定义并初始化
//此驱动可以匹配不止一个设备
struct of_device_id of_match_table_test[] = 
{
	{
		.compatible = "fs_test",
	},
	{
	
	},
}

int of_plat_probe(。。。)
{
	//获取资源

}

int of_plat_exit(。。。)
{
	//退出

}


struct platform_driver of_plat = 
{
	.probe = of_plat_probe,
	.remove = of_plat_remove,
	.driver.owner = THIS_MODULE,
	//of_match_table是struct of_device_id类型的
	.driver.of_match_table = of_match_table_test
	
}


自定义

struct platform_device
|下
struct device
|下
struct device_node类型

of_property_read_u32(pd->dev.of-node,"pinnum",&pinnum);


//中断树
fs_key
{
	compatible = "farsight,key";
	interrupt_parent = <&gpx1>;
	//fisrt cell:gpx1 offset
	//second cell:下降沿触发
	interrupts = <1 2>;
	#interrupts-cells
	
}
1.先找到父中断器，然后根据父中断器的设备树解释文档中的格式，编写结点



按键中断号57---linux内核会将中断号做一个转换（a7）
#include <linux/irqreturn.h>
return IRQ_HANDLED
__fun__函数
处理函数原型
typedef irqreturn_t (*irq_handler_t)(int irqnum, void *dev);
定义了一个函数指针，使用时作指针赋给中断处理注册函数
cat/proc/kmsg

打印flags
printk("flags = %x\n",res->flags);
作图：元素放在一起，然后根据逻辑关系连线并注释
看书时：要明白函数到底在干什么，函数的参数和返回值
都会给你提示。通过看函数，可以帮助里了解函数后面的运行机制

两个半部的理念：解决既要中断执行快，又耗时多，处理事情多的矛盾
注册一般都是将结构体插入内核链表
tasklet（类似cdev：定义设备和设备号--关联并注册--去除）
定义结构体和函数--关联--调度（注册）--去除
#ubdef HZ
#define HZ 1000
旧值不要，新值为1000
tasklet调度时会将结构体插入链表，遍历找到后，执行与之相关联的处理函数


方法：
在上半部的中断处理函数中将下半部的处理函数注册
一定时间后，就会执行下半部的处理函数


workqueue：
进程上下文--进程环境
进程切换时进程上下文就会不一样，进程环境就会不一样
工作队列工作是进程上下文没有变，只是开了一个内核线程
工作列队原理：
在调用驱动程序中的线程来执行


设备树那边是2,IRQF_TRIGGER_FAILLING是0x00000002
驱动得到的得到的是内核处理后的（res->flags）0x00000402,所以
我们要将res->flags与上掩码IRQF_TRIGGER_MASK得到-->触发方式的值 0x00000002 
最后，我们将触发方式与IRQF_DISABLED拼接，形成一个新的标志位传入给中断注册函数          

延时函数怎么写？
怎么写设备树结点

总线：分离资源
字符设备：字符设备文件信息
注意：字符设备文件信息与资源信息一般放在一个结构体中

adc综合：
应用层:
实现循环读设备文件并打印
read，printf

内核层：
1.内核模块
2.platform总线
3.字符设备模型--kmalloc动态分配综合结构体空间
综合结构体：字符设备文件信息与资源信息一般放在一个结构体中
4.内核adc初始化
		adc设备中断树---设置中断并读写寄存器里的数据
		Reg  生成IORESOURCE_MEM---得到寄存器基地址
		Interrupts 生成IORESOURCE_IRQ--得到中断标志
		标志不同代表不同的资源
		映射基地址，offset使用寄存器
		偏移地址会随着基地址变化，基地址要是void *型
		adc初始化

5.waitqueue用户层读函数阻塞（条件阻塞）	
		
6.adc读
		将转换后的值由内核传给用户ubuf--copy_to_user
		<---->应用层读设备文件

7.中断处理函数
adc转换完成之后，修改全局变量，解除阻塞

在platform中嵌入字符设备模型（在probe），
获取资源后，为应用层提供系统调用的接口（file_operation）



i2c适配器：i2c总线模型通信函数的封装
grep i2c5_bus ./*
设备树中两个相同的结点，属性会合并，新值会覆盖旧值

Kernel会根据设备树节点自动展开，生成platform_device。
各种属性生成对应的资源。
Reg  生成IORESOURCE_MEM
Interrupts 生成IORESOURCE_IRQ。

存储内核通过读取设备树生成的platform_device信息的文件被放在哪里？

内核给应用程序传数据的方法copy_to_user,read返回值，ioctl中的参数


块设备驱动：

驱动接到的是内核传过来的request结构体
里面char *buffer是用在内核层和用户层来传递数据

1.注册块设备驱动

2.请求队列初始化--重点在实现请求处理函数
-----我们需要将请求和每个请求中的信息遍历读取出来
然后作出相应的处理
a.没有request queue，不需要排序算法中请求队列的构建，针对不是机械磁盘的情况
将request与处理函数关联，遍历到reques时，就执行处理函数
b.针对机械磁盘，需要排序算法中请求队列的构建-----blk_init_queue

3.gendisk初始化---块设备结构体，描述设备
-----驱动工程师操作的对象
--块设备的资源信息已经由内核帮我们写好放在bio结构体中了


实现请求处理函数xxx_request
...
xxx_transfer（读写数据）
...


--上层文件系统给的是bio, iter等，
通过内核中提供的__bio_kmap_atomic函数将他们
转换为一个映射的地址char *buffer，
它是一个和上层交互的地址，
放从磁盘读出来的数据，和要写的数据

注意：要明白系统框架帮你做了什么，你需要做什么。



块请求：
a.bio（bio_vet bio_iter）--虚假封装为request

b.多个bio封装为request--->多个request需要排序--->request queue

b.机械磁盘
1.注册块设备驱动register_blkdev

2.构建request queue
blk_init_queue

3.注册gendisk
allo_disk
赋值
add_disk

4.处理函数--sbull_full_request
遍历request queue中的request
遍历request中的相关bio
遍历bio中的bio_vet

a.固态磁盘
1.注册块设备驱动register_blkdev

2.构建request（一个个处理，不需要队列）
blk_alloc_queue
blk_queue_make_requeue

3.注册gendisk
allo_disk
赋值
add_disk

4.处理函数--sbull_make_request
遍历bio中的bio_vet


网络驱动：
硬件初始化
sk_buff初始化
接受上层发送数据，填充sk_buff，发送给硬件
中断初始化，中断函数--接受硬件数据，填充sk_buff，发送给上层



bindings中的txt是设备树结点的规则说明文档，dtsi是demo

内核给驱动工程师提供接口的是结构体和函数，
一组结构体和函数就实现了一个比较完整的机制，
所以要了解内核中某个机制的方法就是
了解相关的一组结构体和函数