一组结构体和函数就实现了一个比较完整的机制，
所以要了解内核中某个机制的方法就是
了解相关的一组结构体和函数

一组类和方法就实现了一个比较完整的机制，
所以要了解java中某个机制的方法就是
了解相关的一组包，类和方法

java 5天
1.java环境搭建，java基础语法（变量，运算符，语句），类和对象
2.面向对象之封装，抽象，继承，接口
3.多态，内部类，异常机制
4.多线程，IO网络，常用类
5.反射机制，JNI编程（C和java混编）






上层软件开发语言：java C# c++ os/swift

java工程师：web服务器开发，web前端开发

目标：
andoid工程师：使用java语言开发Android应用程序

c语言的缺陷是可能会产生内存泄漏

java可以跨平台：java运行在java虚拟机上

jvm读取并处理经编译过的平台无关的字节码文件class文件


public class Hello
{
	public static void main(String args[])
	{
		System.out.println("Hello world!");
	}
}

1.配置环境变量
安装jdk1.7软件
我的电脑 --> 属性 --> 高级 --> 环境变量 -- > 
系统变量 --> 双击path --> 
在内容栏添加“;C:\Program Files\Java\jdk1.7.0_15\bin”

用户变量 --> 新建CLASSPATH --> 
在内容栏添加 “;C:\Program Files\Java\jdk1.7.0_15\lib”

2.打开cmd,切换到相应路径输入
javac Hello.java
java Hello
javac命令：将java源程序(.java)编译为字节码(.class)
java命令：启动JVM虚拟机，运行java程序(.class)


eclipse边写边编译，保存就会编译

数据类型：
数值型：byte short int long float double
字符型：char(占两个字节，可以表示的范围变大，
可以存放中文码)
布尔型：boolean(一个字节)

float f01 = 1.2f;
float f02 = (float)1.2;

char c = '中';
int ii = c;
System.out.println(ii);
结果为：20013

boolean b01 = false;
boolean b02 = true;

语句条件中不能使用数字，必须用布尔类型或者值
为布尔类型的表达式
if(0)  错
if(b01 == b02)


引用数据类型
类
数组
接口

基本数据类型间的转换

自动类型转换(小类型自动转换为大类型)--隐式规则

byte --> short --> int --> long

float --> double

char --> int

强制类型转换（大类型转换为小类型）
flaot f = 1.5f;
int a = (int)f;
运算符
数学运算，关系运算，逻辑运算，赋值运算，位运算，三目运算（和c类似）
语句
if, if...else if..., switch, while, do...while, for (和c类似)

注意：
for循环中，增量定义在里面--for（i=0；i<10;i++））
switch（aa），aa的类型byte short  int  char



标示符命名规则
由字母，数字，下划线"_"，美元符号"$"组成
不能以数字开头。不能是系统关键字。严格区分大小写。


类：
String为用户自定义字节码，属于引用数据类型

public class Person{
	//属性--成员变量
	String name;
	int age;
	
	//行为--成员方法
	public void eat() throws Exception
	{
		System.out.println(name+"吃饭");
	}
	public void sleep()
	{
	
	}
}

注意：+有两种功能（重载）：
运算符+，字符串链接符
优先级一样

创建对象：堆区分配内存并创建引用，对象在栈区
Person p01 = new person();

1.创建类
2.创建对象
3.初始化
4.通过对象名引用

对象就是类的实例

加了构造方法：
1.创建类
2.创建对象（此时会调用构造方法，需要传参）----类名 对象名 = new 类名（）
3.通过对象名引用


创建对象时，发生了哪些事情？

1.载入Person.class字节码文件
2.在堆上分配内存(内存空间的大小取决于类中的属性大小)
3.调用构造方法，初始化属性
4.将对象的引用（地址）（hashcode值）保存在变量p中。一般占4个字节。

//构造方法（与类名一致）
    public Person(String _name, int _age){
        name = _name;
        age = _age;
    }
    Person p01 = new person("jack"，10);
 
 
 
   垃圾自动回收机制（GC机制）

没有引用的对象（没有保存对象地址的对象）进入垃圾回收机制。
当JVM（java virtual machine , java虚拟机）检测到内存不够时，
会自动回收没有引用的对象。 

---引用没有指向对象
    
    
方法的传值和传引用（地址）
不管是传值还是传引用（地址），必须修改到对象
才能起作用，局部变量在函数结束时空间就会释放
局部变量和引用申请的空间都在栈区
对象在堆区


数组：
静态初始化--栈区分配
动态初始化--堆区分配

一维数组定义
数组元素类型 数组名[]
int array[];

二维数组定义
数据元素类型 数组名[][]
int array[][]

数组静态初始化
int array[] = {1, 2, 3};

数组动态初始化
int array[] = new int[3];
array[0] = 1;
array[1] = 2;
array[2] = 3;

java中的包好像库文件

自定义类：
包名类名@地址

array：
[F@地址     //一维float型
[[I@地址    //二维int型

数组的拷贝：浅拷贝，深拷贝
浅拷贝--拷地址
int array01[] = {1, 2, 3};
int array02[] = array01;
深拷贝--拷内容
int array01[] = {1, 2, 3};
int array02 = new int[3];
for(int i=0; i<array01.length; i++){
    array02[i] = array01[i]
}

猜数字的小游戏

游戏开始，系统产生0-10之间的随机数。三个玩家依次轮流猜数字，直到有玩家猜中，游戏结束。
Player 玩家类 属性：名字 行为：猜数字
Game 游戏类：行为：开始游戏，系统产生随机数，三个玩家开始猜数字，如果有玩家猜中数字，
游戏结束，如果没有玩家猜中，游戏继续
Test 测试类：入口方法。创建游戏对象，调用开始游戏行为
相关方法
Math.random() 调用该方法得到[0.0, 1.0)之间的随机数

思考，如何得到 0 - 10 之间的随机数？
游戏开始
系统产生随机数 5
玩家a开始猜数字 1
玩家b开始猜数字 3
玩家c开始猜数字 4
都没有猜中，游戏继续
玩家a开始猜数字 5
玩家b开始猜数字 5
玩家c开始猜数字 4
玩家a和b猜中
游戏结束

注意封装成方法


面向对象之封装---为了安全
概念：封装意味着把对象的属性和方法结合成一个独立的系统单位，并尽可能隐藏对象的内部细节。
访问控制修饰符
修饰符	同一个类	同一个包	子类	全局
public	Y	Y	Y	Y
protected	Y	Y	Y	N
默认不写	Y	Y	N	N
private	Y	N	N	N
可以修饰属性，方法，类
private不可以类


一般是属性私有，方法公共
private的同类可以访问
默认不写的同类同包可以访问
protected的同类同包同子类可以访问
public的都可以访问

方法的重载
在同一类，方法名相同，参数列表不同
好处：实现相同功能的时候可以使用相同的方法名



面向对象之继承

练习：设计两个类Animal和Cat
思考：Animal类和Cat类之间的关系

继承的概念：
子类扩展父类(subclass(子类) extends superclass(父类))
子类可以拥有父类所有的成员（属性和行为）， 但是不能继承构造方法
子类可以新增自己的属性和行为
子类改写父类的行为
注意事项：
java中的继承是单继承。子类有且只有一个父类。
子类不能访问父类的私有成员

如果父类只定义带参的构造，那么子类必须在构造的第一行显示调用父类的构造。如果父类定义了不带参的构造，那么子类不需要显示调用，系统自动添加super()调用父类构造
方法的重写(override)
发生在子类中，方法名，参数列表，返回值类型一样。方法体中的逻辑代码不相同。

关键字this
this()调用当前类的构造方法---少些代码，只能放在重载方法中的第一行
this.属性 调用当前对象的属性
this.行为调用当前对象的行为

关键字super
super()调用父类的构造方法---为了把父类定义的属性初始化
super.属性调用父类的属性
super.行为调用父类的行为

关键字final
final修饰属性表示常量
final修饰方法，表示该方法不能被重写
final修饰类，表示该类不能被继承
语句块
类中的游离块，可以包含逻辑代码。一般在创建对象时，被执行。


注意：语句块在构造方法调用之前执行。
Object类
所有java类的祖先类。
如果一个类没有显示继承一个父类，那么该类继承Object类。
打印输出对象名时，系统会自动调用Object类中的toString()方法。
所以通过重写toString()方法，可以实现打印出用户自定义信息。

关键字static
static表示全局或静态的意思
static修饰的成员被所有对象共享
static修饰的变量（实例变量和局部变量），在字节码文件载入JVM时，在静态内存区分配空间。
static修饰属性，表示静态属性
static修饰方法，表示静态方法
static修饰的成员，使用类名访问（也可以省略类名，直接写方法和属性）
static修饰语句块时，在载入语句块所在类的字节码文件时执行(不要求掌握)

注意：属性与局部变量不同

抽象类

概念：抽象类是对类的再次抽象
//抽象类
public abstract class Shape{
    //抽象方法
    public abstract void printfArea();
}
抽象类不能创建对象，只能被子类继承
包含抽象方法的类一定是抽象类，抽象类不一定包含抽象方法
抽象方法，用abstract修饰，没有方法体
----一般用来被继承
如果子类继承一个抽象的父类，要么实现父类中的抽象方法，
要么子类定义为一个抽象类


接口
接口是一种特殊的抽象类，它是对功能的抽象
接口中的所有属性必须是静态常量，方法都为抽象方法
public interface InteA{
    //静态常量
    public static final int A = 10;
    //抽象方法
    public abstract void fun01();
}
一个类可以实现多个接口 （一个类可以拥有多个功能）
思考：接口能否继承父类

不能，如果父类中有普通方法，那么接口继承父类，就拥有了父类中的普通方法，和接口定义矛盾。
思考：接口之间是否可以继承？允许多继承吗？

可以，允许
思考：接口中的成员可以为私有吗？

不行，接口中的成员必须为public公共的。

接口中：
public static final
public static final int a = 10;
----int a = 10;
public abstract
public abstract void fun1();
----void fun1();
可以省略不写，系统自动添加

接口就是把方法进行抽象



练习

利用抽象类，继承、接口综合设计一个系统。
 小明家防盗门的实现过程。
流程：

设计一张抽象的门Door，那么对于这张门来说，就应该拥有所有门的共性，开门openDoor()和关门closeDoor()

然后对门进行另外的功能设计,防盗--theftproof()、防水--waterproof()、防弹--bulletproof()等

要求:利用继承、抽象类、接口的知识设计该门


拜访类和对象，27，椅子大战
猜数字
java会拾荒
数据类型和引用
数组中对象的行为
构造器与垃圾收集器


创建对象的奇迹：
声明引用变量
创建对象
连接对象
引用

方法在代码段

添加子类时想要自动添加，必须把父类名改为对应的父类

多态：
引用数据类型的转换：转换的是对象名
父类是大类型，子类往父类转换
父类引用要调用子类新增的方法必须强制类型转换
--这是编译器的规则导致的，父类引用始终指向子类对象
但大多数使用时，一般调用子类继承父类定义过或重写的方法
而不使用强制转换。
运行时多态：方法的重写

相同父类中，不同子类相互转换会出现类型转换异常
强制转换时：比较对象和引用是否是相同类型
自动转换时：父类型的引用可以指向子类型的对象


java中的父子关系有两种
子类 extends 父类

类 implements 接口

内部类：
创建内部类的对象的时候，需要先创建外部类的对象，解决的方法是将构造方法重载
先创建出一个暂时的外部类对象，然后创建出内部类的对象，
进而就能创造出我们需要的外部类对象了

打印对象是会调用对象里从祖先类继承的tostring方法，为了创造出不同的打印效果，需要将它重写


匿名内部类：继承B类后，立即在A中创建一个内部类对象

匿名内部类的父类可以是抽象类，普通类和接口
匿名内部类是否能够继承内部类？

泛型：封装不同类型的引用类型


常用类：

==比地址
equals比内容




异常：
空指针异常
数组越界异常
算数异常
负数组长度异常---？？？
数字格式化异常
类型转换异常

产生异常后，谁去抛出异常，谁去接收---JVM来做

一个try区块可以搭配多个catch区块，但catch的排列有一定的规则，这跟catch小括号内的异常内有关
如果各个catch内的异常类有继承关系，则子类要排在前，父类要排在后，如果没有继承关系，则可以自由排列。
这样的规定是因为当JVM检测到try区块内有异常事件发生时，就会自动为该异常事件产生对应的异常对象，并比较该对象是否属于第一个catch括号内的对象，如果是就不会比较下一个catch，否则就会继续往下比较。所以子类必须排在前面，若排在后面，便永远没有机会被比较，从而导致编译失败。

异常处理的结论就是：如果自己想处理异常事件，就
直接使用try-catch架构，否则就使用throws将
异常抛给别人处理。

运行时异常是编程错误，需要修改代码
非运行时异常是外界变化引起的，需要捕获异常




多线程：

两种方法（都要重写run()方法）：
1.继承Thread，重写run()方法
--外部类，内部类
2.new Thread类，传一个Runnable接口对象
此对象实现了run()方法
--匿名内部类或this


1.继承
2.重写run()方法体
3.xxx.start

1.创建线程对象--传Runnable接口对象（可以是Runnable接口对象的子类--多态）
2.实现run()方法体
3.thread.start

Thread的生命周期run()方法实际是Runnable中的抽象方法run();

注意：只有Thread对象可以调用start方法


创建   new Thread()
准备   start()
运行   run()
结束   run()里面的代码执行完毕
等待   sleep()/wait(),notify()
阻塞   发生阻塞事件，例如等待键盘输入
 
 

 
 
单例模式:
例子：InputMethodManager
原理：私有构造方法
创建时有两种
静态创建：在定义类的时候new自己
动态创建：在类中定义一个静态普通方法中new自己





文件类 File
只存文件信息，不存文件内容

IO流（包括字节流和字符流）：
字节流：读写所有类型的文件
InputStream / OutputStream--抽象基类

字符流：只能读写文本文件
Reader / Writer-抽象基类


字节流具体实现（功能流）：
--缓冲流
BufferedInputStream / BufferedOutputStream

字符流具体实现（功能流）：
--缓冲流
BufferedReader / BufferedWriter
--转换流
InputStreamReader / OutputStreamWriter
将字节流转换为字符流，
并且可以指定字符的编码格式





网络：
---网络提供的输入输出接口都是字节流
Socket套接字 客户端使用，指定要连接的服务器的ip地址和端口号
ServerSocket 服务器端使用，监听是否有客户端连接

客户端：
Socket socket = new Socket("服务器的ip地址", "服务器的监听端口号")
//建立管道，客户端向服务器发送数据
OutputStream os = socket.getOutputStream()  
//建立管道，接收服务器数据   
InputStream is = socket.getInputStream()       

服务器：
ServerSocket server = new ServerSocket("监听端口")
//服务器监听是否有客户端连接
Socket socket = server.accept();       
//建立管道，服务器接收客户端数据        
InputStream is = socket.getInputStream();      
//建立管道，服务器向客户端发送数据
OutputStream os = socket.getOutputStream()