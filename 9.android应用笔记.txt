andriod 8天

四大组件---ui界面（基础控件--两天）---安卓多线程（异步任务）
---网络（socket，http，天气预报）---数据存储（文件存储，键值对，数据库，内容共享，服务器）
---传感器---多媒体（音乐播放器）


activity启动时，系统自动调用重写的方法
设置activity时，引用了布局资源（类似总线型，为了分离资源）
布局资源：使用标签语言xml(描述性语言,描述资源，需要被解析)
---使用到了反射机制，物品清单列表
原理：读标签时，new标签对象
重要的有5个xml文件
使用索引号指定资源
后期维护，多语言--不写在布局layout中，写在strings.xml中


四大组件都需要在Androidmanifest清单中声明
activity所有的子类--即添加标签
规则：谁添加了意图过滤器谁就先执行

最近打开的程序可以是后台运行的程序也可以是
已关闭的程序还可以是正在运行中的程序

activity生命周期：
开始
创建,初始化数据--onCreate
得到画面--onStart
得到焦点--onResume

关闭
失去焦点--onPause
失去画面--onStop
销毁--onDestroy

重启
onRestart
得到画面--onStart
得到焦点--onResume

后台
失去焦点--onPause
失去画面--onStop

findViewById--多态

重写的方法基本都是回调方法，
我们需要注意的是什么时候系统会调用它


监听click，是一个接口功能

1.匿名内部类
---用空间换时间
2.内部类--共用同一个监听对象，共用同一个逻辑
---用时间换空间
---改进--不用内部类
直接实现OnClickListener接口，传this
--重写onClick方法体
3.在button中添加一个onclick属性




activity切换：
loginactivity.java：容器
layout-activity_login.xml:布局

切换时不能自己new对象，只能通知activity manager
使用intent类

显示意图：
1.创建intent类
2.设置意图，确认要启动的组件
---setClass（上下文，class类型对象）
---上下文是activity的父类
---class类型对象,反射机制
3.执行意图
startActivity(intent);

注意：relativelayout为可任意拖动

隐式意图：
没有明确指定要启动的activity，由用户来决定
通过categoty--action

-还可以用调用系统activity，并传数据给他
//ctrl + 1---自动补全

向下传数据：
1.监听
2.获得可编辑文本框对象的引用
3.取出文本框的文字内容

另一个activity：
1.取数据getIntent();
---得到启动当前activity的意图对象

步骤：
1.找到控件对象并监听-a
2.跳转并取出控件数据然后传递意图-a
3.接受意图并修改控件数据-b


向上传递数据：类似逆向传参
一个activity运行完关闭，想上传数据，当另一个
activity重启的时候接收数据（intent）

步骤：
1.找到控件对象并监听-a
2.跳转并请求结果--意图对象-a
3.取出控件数据并设置结果然后销毁自己-b
4.接收结果并修改控件数据--意图对象-a

requestcode用来区别传回的intent


activity的四种载入模式：
1.stadard可以在activity中创建自己
2.singleTop
3.singleTask
4.singleInstance

activity的重点：
生命周期
切换与数据传递
任务栈
四种载入模式










service：
需要用intent启动服务



非绑定service生命周期
开始
onCreate
onStartCommand（一般在这里创建线程执行服务逻辑）
结束
onDestory

一个服务类只产生一个服务对象
非绑定：
开启线程，执行服务逻辑：
1.创建线程对象,传Runnable接口对象（可以是Runnable接口对象的子类--多态）
2.thread.start
3.重写run()方法体
4.关闭服务，关闭线程





绑定--与activity绑定在一起
绑定service生命周期
开始
onCreate
onBind
结束
onUnbind
onDestory

使用绑定服务，在activity中获取服务信息（下载进度）
1.找到监听对象并监听-a
2.跳转onClick--意图对象-a
绑定服务
解除绑定
获取下载进度

绑定bindService
--使用匿名内部类对象获取服务中的数据
--serviceconnection
解除绑定
----一般在activity的生命周期方法
onDestory还要再次解除绑定

在非绑定服务中：
oncreate方法中：
onStartCommand方法中：创建线程执行服务逻辑
onDestroy方法中：销毁服务

在绑定服务中：
oncreate方法中：创建线程并执行服务
onbind方法中：返回服务信息
onunbind方法中：结束服务
onDestroy方法中：销毁服务


四个界面：
注册确认后，b将信息回传给a
登录后，a将信息传给c
选择好友后，c将信息传给d

监控:
登录，注册，确认，好友


开启activity：
Intent intent = new Intent();
intent.setClass(AaActivity.this, MainActivity.class);
-----Intent intent = new Intent(this, AaActivity.class);
startActivity(intent);
startActivityForResult(intent, 1);
intent.setAction(Intent.ACTION_DIAL);

关闭activity：
finish()

启动服务：
startService(intent)
系统自动调用服务类中的 onCreate --> onStartCommand --> running

关闭服务：
stopService()/stopSelf()
系统自动调用服务类中的 onDestroy --> die





Widget包：
容器控件：布局--可以容纳其他控件
显示控件
交互控件
特殊控件



容器控件属性：
线性布局
排版方向--orientation
水平，垂直
默认为水平--不写

控件宽高
layout_width
layout_height

重心--gravity
有9个位置： left, right, top, bottom, center, 
center_vertical, center_horizental
相对重心--layout_gravity
--受到布局方向的影响，如果布局方向为水平，
那么相对重心只有top，bottom，center_vertical

外间距--layout_margin 
控件与控件之间的距离
内间距--padding
控件内容与控件边框之间的距离


权重layout_weight
间距重心冲突时，间距不起效，重心起效


相对布局：
方位
当前控件相对于父控件的位置
一共九个方位
layout_alignParentTop, 
layout_alignParentLeft,
layout_alignParentRight, 
layout_alignParentBottom,
layout_centerInParent, 
layout_centerHorizontal, 
layout_centerVertical
。。。
。。。

当前控件相对于其它控件的位置
layout_toRightOf, 
layout_toLeftOf, 
layout_above, 
layout_below

边缘对齐
layout_alignTop
layout_alignBottom
layout_alignRight
layout_alignLeft

外间距
layout_margin


FrameLayout(帧布局)
分层摆放控件



线性布局
外间距：自己相对父控件或其他控件的距离
内间距：自己相对内容的距离---受重心影响
相对重心：自己相对父控件的位置
重心：自己内容相对自己的位置





显示控件：
TextView(文本框)
text
textColor---#RRGGBB
textSize----xxsp,sp通常用来设置字体大小
background---#RRGGBB，背景也可以是自定义图片
autolink--web


EditText(可编辑的文本框)
hint
inputType 输入文字的类型
maxLength 最多输入的文字数量
ems 中文字符宽度
addTextChangedListener(TextWatcher) 监听文本框文字改变


ImageView(图形控件)
scaleType

ProgressBar(进度条)
max
progress





交互控件：
Button(按钮)
enabled 
onClickListenner

RadioButton(单选按钮)---继承Button
checked
注意单选按钮必须有RadioGroup包裹，
否则单选功能消失。

CheckBox(多选按钮)---继承Button
checked
选择状态--isChecked();

SeekBar(可拖动的进度条)---继承ProgressBar
onSeekBarChangeListenner
三个动作：按下，拖动，松开


重心受空控件大小影响



特殊组件：
toast--不属于activity
一个类只能创建一个对象--没有用单例模式，只是在
静态方法中创建了一个toast对象
--Toast result = new Toast(context);

makeText
system.currentTimeMillis();


alertdialog（对话框）--builder
创建对话框对象
初始化：
设置标题
设置正文
设置按键监听
创建
显示

菜单项：

选项菜单：--按menu呼出
--创建activity时会创建选项菜单
和监听


上下文菜单：--长按某控件呼出菜单
--长按时会创建上下文菜单和监听

创建上下文菜单和监听
菜单addsubmenu
监听item

在某控件上注册上下文菜单
registerforcontextmenu


美化布局：

背景选择器setect
--常用于有不同状态的控件
drawable中新建文件xml
标签：selector---item



样式style
--可以继承其他样式，用于字体或背景等
values中新建文件xml
标签：style---name，parent

使用shape绘制形状--矢量图
drawable中新建文件xml
标签：shape---gradient，corners，
stroke，padding

点九图
放大时，取四个角，其余的按原色填充

高级控件：

scrollview：自由滑动效果

ListView--容器视图
mvc设计模式--视图与数据分离
model：数据模型--数组等
view：视图--listview
control：控制器--将数据传给视图，adapter

1.录入数据
2.创建适配器
3.绑定ListView


adapter
系统适配器：arrayadapter 数组适配器
						simpleadapter 简单适配器
						simplrcursoradapter 数据相关章节讲解
---提供ListView所需的控件(UI布局)和数据源
ListView中的item项中包含控件textview等控件格式
，由它来显示数据

arrayadapter 数组适配器
放包装类

simpleadapter 简单适配器
放链表，链表中放hashmap


注意:动态创建数组时，不会自动装箱


从上下文获得服务，用此服务解析布局
view与activity是什么关系？

只监听了一个按键，为什么其他按键也可以用？
不同item项的button1都是一样的，id是否是一样呢？


监听接口可以对所有控件进行监控，如textview
优化：
复用对象
保存引用
优化一：
控制view对象的个数
contextview是系统提供的引用，
通过contextview保存view对象，
可以在同一个position下，
只创建一个视图对象

优化二：
contextview指向对象中
记录控件引用
1.用一个内部类记录引用
class MyHolderTog
{
	TextView tv;
}

2.将这个内部类对象记录在convertview中
--setTag
--getTag

//记录控件引用
myHolder = new MyHolderTog();
myHolder.tv = tv;
//将holder对象记录到convertView中
convertView.setTag(myHolder);

刷新适配器更新listview视图：
adpater.notifyDataSetChanged();







调试：打印位置和数量---shop
结论：
数据链表中有多少数据就有多少position
position从0开始与数组下标相同
加了优化机制后，系统会创建一屏幕item个数+1（为0position）
这是为了处理滚动提出的机制
但在程序员看来，position的位置并没有变


自定义控件：
继承View，重写onDraw(Canvas)方法
填充画布颜色
canvas.drawcolor(color.black)
canvas.drawcolor(color.rgb(111,111,111))

绘制线段
canvas.drawLine(startX, startY, endX, endY, paint);
绘制矩形
canvas.drawRect(left, top, right, bottom, paint);
绘制圆
canvas.drawCircle(x, y, radius, paint);
绘制文字

//文字的锚点坐标在左下角
canvas.drawText(text, x, y, paint);
绘制位图

//图片的锚点坐标在左上角
canvas.drawBitmap(bitmap, x, y, paint);
Paint 画笔类

设置画笔颜色
paint.setColor(Color.BLACK);
消除画笔锯齿
paint.setAntiAlias(true);
设置画笔样式
//实心画笔（默认样式）
paint.setStyle(Style.FILL);
//控件画笔
paint.setStyle(Style.STROKE);



重写onTouchEvent方法，监听用户事件

---一直在执行
获取用户触摸点坐标
event.getX();
event.getY();
获取用户触摸动作
event.getAction();
用户动作
MotionEvent.ACTION_DOWN //按下
MotionEvent.ACTION_UP   //松开
MotionEvent.ACTION_MOVE //移动
注意：如果要求捕获全部动作，需要将onTouchEvent方法的返回值设置为true
刷新控件界面
在主线程中使用
this.invalidata();
在子线程中使用
this.postInvalidate();
启动子线程，制作动画效果


1.当做普通控件找id
2.直接解析setContentView(new MyView(this));


多线程：
android系统会回收优先级低的进程
主线程与子线程通过消息队列通信
Handler机制。

功能：负责子线程和主线程之间的通讯。
子线程发送消息给底层的消息队列。
handler.sendMessage(msg)

主线程查询消息队列，处理消息对象。
handleMessage(msg)
MessageQueue 消息队列

负责存储消息对象
Looper

负责管理消息队列(查询消息队列，消息入队列)
Message消息对象

//从消息池中获取消息对象
Message msg = handler.obtainMessage();
//在消息对象上绑定int类型数据
msg.arg1 = count;
//在消息对象上绑定其它类型数据
msg.setData(Bundle);   //Bundler为数据集（类似于HashMap容器）
将runnable添加到消息队列

myHandler.post(new Runnable() {

    @Override
    public void run() {
        // TODO Auto-generated method stub
        Log.e("Test", "thread name = "+Thread.currentThread().getName());
    }
});

池（线程池）--消息池
保存一定数量的对象，用于传递消息
用完放回去

qq交互聊天界面

主线程：刷新ui，接收消息，监听事件


Handler机制。
功能：负责子线程和主线程之间的通讯。

多线程制作动画：
welcomeactivity--主线程
mainactivity--子线程

1.开线程休眠5s跳转后到子线程
2.将runnable添加到消息队列--handler.postDelayed
ui线程在delay后执行runnble对象中的run()方法
--5s跳转后到子线程
---用于延迟做某件事件，但不能用于做耗时操作
--用户设定时间，系统延时后自动开启线程

同步：
代码按照一个顺序流执行
异步：
代码按照多个顺序流执行

异步任务（AsyncTask）
封装多线程和Handler机制。
--只需填空，系统帮我们实现多线程和Handler机制
--new对象，发消息，收消息等等

多个异步任务不能同时执行，在某个时间内，只能执行一个异步任务。
注意
异步任务对象只能执行一次
异步任务对象必须在UI主线程中创建

继承异步任务类的参数！

继承异步任务类：
1.将耗时操作放在doInBackground方法中
并用publishprogress发布Progress
--该方法运行在后台线程中

2.用onProgressUpdate接受publishprogress
传过来的参数，并更新UI控件
--该方法运行在UI线程中


UI类：
1.监控按键
2.启动异步任务
task = new CountTask(tv);
task.execute();
3.task.cancel();


handler机制：播放音乐--需要交互
异步任务：下载，联网，计数--不用交互


onPreExecute()---初始化操作等
onPostExecute()--接受结果值（doInBackground的返回值）


框架使用的就是回调的思想
重写的方法和抽象方法大部分都是回调方法，
由框架使用接口回调



网络：
需要联网时，都需要给应用程序添加一个联网权限
HTTP实际也是基于socket的

练习：使用http,下载图片时显示进度条

基于Socket的网络通讯
客户端
Sockect socket = new Socket(ip, port);
InputStream is = socket.getInputStream();   
OutputStream out = socket.getOutputStream();

服务器端
ServerSocket server = new ServerSocket(port);
while(isRun){
    Socket socket = server.accept();
    //启动一个子线程和客户端通讯
    new Thread(socket).start()
    //将socket对象添加到链表中进行管理
    list.add(socket)
}


基于HTTP的网络通讯
超文本传输协议(HyperText Transfer Protocol -- HTTP)是一个设计来使客户端和服务器顺利进行通讯的协议。
HTTP在客户端和服务器之间以request-response protocol（请求-回复协议）工作。

http请求类型
get请求：从指定的服务器中获取数据
post请求：提交数据给指定的服务器处理

get请求和post请求的区别
Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求。
Get是获取信息，而不是修改信息，类似数据库查询功能一样，数据不会被修改。
Get请求的参数会跟在url后进行传递，请求的数据会附在URL之后，以?分割URL和传输数据，
参数之间以&相连,％XX中的XX为该符号以16进制表示的ASCII，如果数据是英文字母/数字，
原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密。
Get传输的数据有大小限制，因为GET是通过URL提交数据，
那么GET可提交的数据量就跟URL的长度有直接关系了，
不同的浏览器对URL的长度的限制是不同的。 
GET请求的数据会被浏览器缓存起来，用户名和密码将明文出现在URL上，
其他人可以查到历史浏览记录，数据不太安全。
在服务器端，用Request.QueryString来获取Get方式提交来的数据。

Post请求则作为http消息的实际内容发送给web服务器，
数据放置在HTML Header内提交，Post没有限制提交的数据。
Post比Get安全，当数据是中文或者不敏感的数据，则用get，
因为使用get，参数会显示在地址，
对于敏感数据和不是中文字符的数据，则用post。

POST表示可能修改变服务器上的资源的请求，在服务器端，
用Post方式提交的数据只能Request.Form来获取。
提交HTTP请求的两种方式：HttpUrlConnection和HttpClient
HttpClient是apache的开源实现，而HttpUrlConnection是安卓标准实现，
安卓SDK虽然集成了HttpClient，但官方支持的却是HttpUrlConnection。

虽然HttpClient更好地支持很多细节的控制（如代理、COOKIE、鉴权、压缩、连接池），
但相应地对开发人员要求更高，代码写起来更复杂，
普通开发人员很难做到对它很好地驾驭，
官方的支持也越来越少；而HttpUrlConnection对大部分工作进行了包装，
屏蔽了不需要的细节，更适合开发人员直接调用，而且官方对它的支持和优化也会越来越好。
我们既然是做安卓应用的开发，自然要遵循安卓官方的指引，选用HttpUrlConnection。
使用HttpUrlConnection提交HTTP请求

注意：uri-拨号键---内部资源
      url-网络--外部资源

get方式
//超链接对象
URL url = new URL(urlString );
// 打开连接   
HttpURLConnection con = (HttpURLConnection) url.openConnection();
// 设置请求方式，默认为GET，可不写
con.setRequestMethod("GET");
// 输入流读   
InputStream is = con.getInputStream();
// 下载数据
byte[] bs = new byte[1024];                
int len = 0;   
OutputStream os = new FileOutputStream(FileName);   
while ((len = is.read(bs)) != -1) {   
    os.write(bs, 0, len);   
}  


post方式
HttpURLConnection con = (HttpURLConnection) url.openConnection();
// 发送POST请求必须设置  
con.setDoOutput(true);

//取消用户和密码缓存
con.setUseCaches(false);
// 设置请求方式
con.setRequestMethod("POST");
con.setRequestProperty("Content-Type","application/json");
// 向服务器提交数据
OutputStream os = Connection.getOutputStream();
os.write(inputParam.getBytes(HTTP.UTF_8));
os.flush();
// 接收服务器数据
InputStream is = Connection.getInputStream();
strResponse = new String(StreamsUtils.readByteArrayFromStream(is),
HTTP.UTF_8);

测试网址
http://www.nowamagic.net/librarys/images/random/rand_11.jpg
http://fanyi.youdao.com/
http://61.155.138.173:11180/auth/api/nameLogin



Json解析

Json概念
javaScript对象表示法(JavaScript Object Notation) JSON属于轻量级文本数据交换格式。
JSON独立于平台和语言 JSON具有自我描述性，更易理解
类似xml，比xml更小，更快，更易解析
XML文件和Json文件对比
java,c/c++,c#都可以解析它，跨平台



XML文件和Json文件对比
xml文件
<info>
    <name>jack</name>
    <age>20<age>
    <salary>1000</salary>
    <爱好>
          <String>看电影</string>
          <String>打代码</string>
          <String>跑步 </string>
    </爱好>
 </info>

Json文件
数据保存在{key:value}(键值对)中
{"info": {"name":"jack", "age":20, "salary":3000, "爱好":["看电影", "打代码","跑步"]}}

Json语法
key数据类型：
String

value数据类型：
{}             JsonObject类型
[]             数组类型 
String         字符串类型
int, float     数值类型


在android工程中，
除资源外的文件都放在raw文件夹中
如json文件

Json解析相关类
JSONObject：Json对象，里面包含一个或多个键值对
JSONArayy：Json数组，内部元素由链表管理



解析json：
1.得到网络流
Inputstream is = this.getResources().openRawResourece(R.raw,info)

2.字节流is转字符流isr，字符流转缓冲流br
读一行br.readLine--->返回jsonString

3.将json字符串封装在json对象中
JSONObject jsonObject = new JSONObject(jsonString);

4.通过key值取出value
String name = jsonObject.getString("name");
String pass = jsonObject.getString("pass");

//嵌套
String info = jsonObject.getString("info");
JSONObject infoObject = jsonObject.getString("info");
String name = infoObject.getString("name");
String pass = infoObject.getString("pass");

//Json数组
JSONArayy favorArray = infoObject.getArray("favor");
//取出json数组中下标为index的元素
jsonArray.getString(index);
//json数组中的元素可以为任意类型
jsonArray.getInt(index);
jsonArray.getJSONObject(index);
jsonArray.getJSONArray(index);

{"name":"ivy", "pass":"19901010"}

{
	info:
	{
		"name":"jack",
	 	"age":20,
	  "favor":["running", "coding", "sports"]
	}
}

{
	"web":
	[
		{"value":["中国","中华人民共和国","瓷器"],"key":"China"},
		{"value":["中国国际航空公司","中国国际航空","中国国航"],"key":"Air China"},
		{"value":["中国大陆","大陆中国","大陆地区"],"key":"Mainland China"}
	]
}







字符流写到缓冲区里了

Android数据存储

文件存储--IO流
将文件存储到外部存储设备（sdcard）
需要写sdcard的权限 
公共数据：音频文件，照片。

将文件存储到内部存储设备（内存）
文件存储路径系统指定的默认路径：/data/data/package name / files 
私人数据：用户密码
string.getBytes[]--将字符保存为字符数组

sharedPreference存储方式（键值对的存储方式）--IO的操作已经被封装好了
将SharedPreference工具从上下文中获取
将文件存储在内部存储设备中 
路径：/data/data/packageName/shared_prefes 
文件类型：xml
存储的数据类型
float,int,String,boolean,long

sharedPreference shared;
//从上下文取工具
shared = this.getSharedPreferences("info",Context.MODE_PRIVATE);

//获得编辑对象
Editor editor = shared.edit();

//保存数据
editor.putSring("name","Ivy");
editor.putSring("pass","123");

//提交数据
editor.commit();

//读数据
String name = shared.getString("name","");
String pass = shared.getString("pass","");

checked多选框：
选择状态--isChecked();





Sqlite小型关系数据库

sqlite3数据库基本知识：
创建表格
表格内容:字段
主键--指明以什么字段为索引，如ID

修改表格：
新建一个表格，
复制原有的字段，
添加新的字段

java中操作sqlite3的四个类：


1.SqliteOpenHelper类
创建数据库，升级数据库。 
数据库文件默认位置为内部存储设备
---一般继承它
2.SqliteDatabase类
操作数据库。创建表格，删除表格。执行增删改查。 
sqliteDatabase对象从SqliteOpenHelper对象中获取
----context可以帮我们访问到系统的资源

--继承SqliteOpenHelper类
// 第一次创建数据库文件时，系统调用该方法
// 在该方法中创建表格
@Override
public void onCreate(SQLiteDatabase db) {
	// TODO Auto-generated method stub

	// 执行数据库命名，创建表格
	db.execSQL("create table " + TABLE + "(" + ID
			+ " integer primary key autoincrement, " + NAME + " char(20), "
			+ AGE + " integer, "+SCORE+" integer);");
	Log.d("Test", "onCreate");
}

// 当前数据库版本高于旧版本时，系统调用该方法，升级数据库
@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
	// TODO Auto-generated method stub
	Log.d("Test", "onUpgrade");
}


创建数据库步骤：
mainactivity：	
创建数据库帮助对象，声明数据文件名和版本号
MySqliteOpenHelper mySqliteOpenHelper = new MySqliteOpenHelper(this, "info.db", null, 2);	
打开数据库，如果第一次执行该方法，系统调用onCreate方法，创建数据库db
db = mySqliteOpenHelper.getWritableDatabase(); 



3.ContentValue类
--用来存放记录 
增加表项步骤：---db.insert
创建map--values
---ContentValues values = new ContentValues();
将记录填充到values（map）中，
---contentValue.put("字段名", "记录值");
将map插入数据库
db.insert(MySqliteOpenHelper.TABLE,null,values)

4.Cursor类
---游标，查询数据库。 
重点：使用android提供的接口，对数据库进行增删改查操作。
查表项步骤：
//游标指向字段
Cursor cursor = db.query(MySqliteOpenHelper.TABLE, null, null, null, null, null, null);
for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
		int id = cursor.getInt(cursor.getColumnIndex(MySqliteOpenHelper.ID));
		String name = cursor.getString(cursor.getColumnIndex(MySqliteOpenHelper.NAME));
		Log.d("Test", id + " " + name);
}
			
获取表格中字段数量
cursor.getColumnCount()			
得到所有的字段名
cursor.getColumnNames()	
得到记录的数量
cursor.getCount();


用listview显示数据库数据
--simplrcursoradapter，有缺点被淘汰了，主键必须是_id
--使用自定义adpater

数据模型：
用游标将数据查询放在链表中

适配器：
读取数据并显示

在listview中绑定适配器


ContentProvider 内容共享(内容提供者)
概念：
将Sqlite包装成共享数据库，提供Uri地址访问共享数据库。
Uri地址："content://package name component name" 
ContentProvider本身并不是数据库，而是给数据库提供了一个共享功能。

用途：
将多个应用需要的数据做成一个共享数据库。例如联系人数据，多媒体数据等等。
访问共享数据库
Uri共享数据库地址


制作共享数据库：
继承ContentProvider类。
重写onCreate方法：
1.在该方法中创建数据库
2.重写insert，delete，update，query方法。在这些方法中操作数据库。
3.在清单文件中添加provider标签，设置authorities属性。该属性为共享数据库uri地址。
4.利用ContentResolver操作共享数据库。例如给共享数据库添加记录等。

ContentResolver对象，该对象从上下文中获取 
该对象拥有insert，delete，update，query方法
调用它们就是调用，ContentProvider中提供的方法
可以对共享数据库进行增删改查

注意：
共享数据库在安装应用程序，载入清单文件时，被创建，并且调用里面onCreate方法。
访问系统联系人共享数据库
//联系人数据库地址
Uri uri = ContactsContract.Contacts.CONTENT_URI;
//联系人姓名字段
ContactsContract.Contacts.DISPLAY_NAME
权限： <uses-permission android:name="android.permission.READ_CONTACTS"/>
---安装app时，安装画面中有使用权限的提示


--有两个数据源：数据库和链表
--在数据库中有一对多的时候，不要存在一个表中
要存在多个表中，然后将他们关联起来

将数据存放到服务器--没讲


多媒体MediaPlayer类

概念：

控制音乐的播放，暂停等
MediaPlayer类中的常用方法

载入res下raw下的音乐文件 
MediaPlayer.create(R.raw.a_15);

载入sdcard下的音乐文件 
MediaPlayer mediaPlayer = new MediaPlayer() 
mediaPlayer.setDataSource("/sdcard/m_01.mp3"); 
mediaPlayer.prepare();

播放音乐 
mediaPlayer.start();

暂停音乐 
ediaPlayer.pause();

停止音乐 
mediaPlayer.stop();

释放音乐资源 
mediaPlayer.release();

检测当前音乐是否处于播放状态
mediaPlayer.isPlaying();

设置当前音乐循环播放 
mediaPlayer.setLooping(true);

获取当前音乐的总时长 
mediaPlayer.getDuration();

得到当前音乐的播放位置 
mediaPlayer.getCurrentPosition();
--格式化时间simple
监听当前音乐是否播放完毕 
OnCompletionListener

设置音乐的播放位置 
seekTo()


1.使用服务
使用非绑定服务，服务对象一直存在
activity可以一直给他发数据
2.使用广播



四大组件之BroadcastReceiver(广播接收器)

概念
接收和处理广播
应用场景

1.接收系统广播
Android 内置了很多系统级别的广播，我们可以在应用程序中通过监听这些广播来得到各种系统的状态信息。
比如手机开机完成后会发出一条广播，电池的电量发生变化会发出一条广播，
时间或时区发生改变也会发出一条广播等等。如果想要接收到这些广播，
就需要使用广播接收器。

2.接收其它应用程序的广播
实现强制下线功能

3.接收同一个应用程序中其它组件发送的广播
实现Activity和Service组件间的通讯



注意：广播接收器的生命周期很短，大概只有10秒，
所以不要在其中不要进行耗时的操作，
可以在收到广播后启动服务或活动来进行耗时操作

相关类：
使用到了隐式意图

广播接收器被激活后什么时候会被销毁？
静态注册：应用被卸载时
动态注册：组件被销毁时

静态注册
将广播接收器注册到应用程序上(清单文件中)
动态注册
将广播接收器注册到组件(Activity, Service)上

静态注册：
接收广播：
//intent就是广播使用的消息体
1.创建广播接收器
---继承broadcastreceiver
---重写onReceive方法

2.在清单里注册广播接收器，并添加广播接收权限
在清单中设置意图过滤器（intent-filter，action），
--指定感兴趣的广播
系统收到intent（广播）后激活广播接收器
调用onReceive方法

发送广播：
创建隐式意图，添加带传送数据
Intent intent = new Intent();
intent.putExtra("info", "十分钟之后下课");
intent.setAction("com.farsight.broad");
以广播的形式发送sendBroadcast(intent);


动态注册:
接收广播:

1.创建广播接收器
---创建一个继承BroadcastReceiver的匿名内部类
对象，保存在BroadcastReceiver类型的引用receiver中
---重写onReceive方法

---activity的onCreate中
2.在activity中里注册广播接收器，
并添加广播接收权限
在activity中设置意图过滤器（intent-filter，action），
--指定感兴趣的广播
IntentFilter filter = new IntentFilter("action")
registerReceiver（receiver，filter）;

3.设置按键监听，按键按下，开启服务

---activity的onDestory中
4.注销广播unregisterReceiver（receiver）

---服务的onCreate中创建线程，在线程中
发送广播：
创建隐式意图，添加带传送数据
Intent intent = new Intent("action");
intent.putExtra("progress", count);
以广播的形式发送sendBroadcast(intent);


联合seekBar
activity本来就可以通过intent给服务传数据，
不需要用广播
一个服务存在的时候，系统就不会重复调用onCreate创建服务，
只会调用onStratCommand,再次开启服务的时候，
其实是在传参和发命令


给mediaplayer设置监听，监听音乐是否播放完毕
接口OnCompletionListener
实现onCompletion方法
reset
release
create(this,另一个媒体文件)
setOnCompletionListener
start




android支持13种传感器。

java通过JNI调用本地服务，本地服务访问驱动。 
init-->linux-->uboot 
apk --> 30个android服务 --> 本地服务 --> 驱动 
引入工具类：例如布局服务，传感器服务等

学习重力传感器时，使用真机测试。


传感器应用
加速传感器，实现计步器功能。重力球游戏。
方向传感器，用于制作指南针。
光传感器，自动调节屏幕亮度
距离传感器，打电话时，自动黑屏。
螺旋仪传感器，可以检测转动和偏转，在wii体感游戏上有很好的应用。
温度传感器


获取传感器步骤：

1.当前类实现SensorEventListenner接口
获取SensorManager对象（获取传感器服务）
---this.getSystemSensor(Context.SensorService)
2.获取传感器Sensor对象，
---通过sensorManager.getDefaultSensor(int type)
3.注册传感器监听器
--registerListener
实现接口方法
--onSensorChanged
--系统自动调用该方法，获取传感器数据
--onAccuracyChanged
--当传感器精度(系统获取传感器数据的频率)改变时，
系统自动调用该方法

SensorEvent类中保存x,y,z的重力加速度
SensorEvent event
float value[] = event.values;

X：+ 0 -
Y：+
   0
   -